use num_enum::TryFromPrimitive;
use serde::Deserialize;

pub type AgeRatingContentDescriptionResult = Vec<AgeRatingContentDescription>;

#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Deserialize, Clone, PartialEq)]
pub struct AgeRatingContentDescription {
    pub id: u64,
    pub category: Option<i32>,
    pub description: Option<String>,
    pub checksum: Option<String>,
}

impl AgeRatingContentDescription {
    pub fn category(&self) -> &'static str {
        Category::as_int(self.category).as_str_name()
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, TryFromPrimitive)]
#[repr(i32)]
pub enum Category {
    Null = 0,
    EsrbAlcoholReference = 1,
    EsrbAnimatedBlood = 2,
    EsrbBlood = 3,
    EsrbBloodAndGore = 4,
    EsrbCartoonViolence = 5,
    EsrbComicMischief = 6,
    EsrbCrudeHumor = 7,
    EsrbDrugReference = 8,
    EsrbFantasyViolence = 9,
    EsrbIntenseViolence = 10,
    EsrbLanguage = 11,
    EsrbLyrics = 12,
    EsrbMatureHumor = 13,
    EsrbNudity = 14,
    EsrbPartialNudity = 15,
    EsrbRealGambling = 16,
    EsrbSexualContent = 17,
    EsrbSexualThemes = 18,
    EsrbSexualViolence = 19,
    EsrbSimulatedGambling = 20,
    EsrbStrongLanguage = 21,
    EsrbStrongLyrics = 22,
    EsrbStrongSexualContent = 23,
    EsrbSuggestiveThemes = 24,
    EsrbTobaccoReference = 25,
    EsrbUseOfAlcohol = 26,
    EsrbUseOfDrugs = 27,
    EsrbUseOfTobacco = 28,
    EsrbViolence = 29,
    EsrbViolentReferences = 30,
    EsrbAnimatedViolence = 31,
    EsrbMildLanguage = 32,
    EsrbMildViolence = 33,
    EsrbUseOfDrugsAndAlcohol = 34,
    EsrbDrugAndAlcoholReference = 35,
    EsrbMildSuggestiveThemes = 36,
    EsrbMildCartoonViolence = 37,
    EsrbMildBlood = 38,
    EsrbRealisticBloodAndGore = 39,
    EsrbRealisticViolence = 40,
    EsrbAlcoholAndTobaccoReference = 41,
    EsrbMatureSexualThemes = 42,
    EsrbMildAnimatedViolence = 43,
    EsrbMildSexualThemes = 44,
    EsrbUseOfAlcoholAndTobacco = 45,
    EsrbAnimatedBloodAndGore = 46,
    EsrbMildFantasyViolence = 47,
    EsrbMildLyrics = 48,
    EsrbRealisticBlood = 49,
    PegiViolence = 50,
    PegiSex = 51,
    PegiDrugs = 52,
    PegiFear = 53,
    PegiDiscrimination = 54,
    PegiBadLanguage = 55,
    PegiGambling = 56,
    PegiOnlineGameplay = 57,
    PegiInGamePurchases = 58,
    CeroLove = 59,
    CeroSexualContent = 60,
    CeroViolence = 61,
    CeroHorror = 62,
    CeroDrinkingSmoking = 63,
    CeroGambling = 64,
    CeroCrime = 65,
    CeroControlledSubstances = 66,
    CeroLanguagesAndOthers = 67,
    GracSexuality = 68,
    GracViolence = 69,
    GracFearHorrorThreatening = 70,
    GracLanguage = 71,
    GracAlcoholTobaccoDrug = 72,
    GracCrimeAntiSocial = 73,
    GracGambling = 74,
    ClassIndViolencia = 75,
    ClassIndViolenciaExtrema = 76,
    ClassIndConteudoSexual = 77,
    ClassIndNudez = 78,
    ClassIndSexo = 79,
    ClassIndSexoExplicito = 80,
    ClassIndDrogas = 81,
    ClassIndDrogasLicitas = 82,
    ClassIndDrogasIlicitas = 83,
    ClassIndLinguagemImpropria = 84,
    ClassIndAtosCriminosos = 85,
}

impl Category {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Category::Null => "CATEGORY_NULL",
            Category::EsrbAlcoholReference => "ESRB_ALCOHOL_REFERENCE",
            Category::EsrbAnimatedBlood => "ESRB_ANIMATED_BLOOD",
            Category::EsrbBlood => "ESRB_BLOOD",
            Category::EsrbBloodAndGore => "ESRB_BLOOD_AND_GORE",
            Category::EsrbCartoonViolence => "ESRB_CARTOON_VIOLENCE",
            Category::EsrbComicMischief => "ESRB_COMIC_MISCHIEF",
            Category::EsrbCrudeHumor => "ESRB_CRUDE_HUMOR",
            Category::EsrbDrugReference => "ESRB_DRUG_REFERENCE",
            Category::EsrbFantasyViolence => "ESRB_FANTASY_VIOLENCE",
            Category::EsrbIntenseViolence => "ESRB_INTENSE_VIOLENCE",
            Category::EsrbLanguage => "ESRB_LANGUAGE",
            Category::EsrbLyrics => "ESRB_LYRICS",
            Category::EsrbMatureHumor => "ESRB_MATURE_HUMOR",
            Category::EsrbNudity => "ESRB_NUDITY",
            Category::EsrbPartialNudity => "ESRB_PARTIAL_NUDITY",
            Category::EsrbRealGambling => "ESRB_REAL_GAMBLING",
            Category::EsrbSexualContent => "ESRB_SEXUAL_CONTENT",
            Category::EsrbSexualThemes => "ESRB_SEXUAL_THEMES",
            Category::EsrbSexualViolence => "ESRB_SEXUAL_VIOLENCE",
            Category::EsrbSimulatedGambling => "ESRB_SIMULATED_GAMBLING",
            Category::EsrbStrongLanguage => "ESRB_STRONG_LANGUAGE",
            Category::EsrbStrongLyrics => "ESRB_STRONG_LYRICS",
            Category::EsrbStrongSexualContent => "ESRB_STRONG_SEXUAL_CONTENT",
            Category::EsrbSuggestiveThemes => "ESRB_SUGGESTIVE_THEMES",
            Category::EsrbTobaccoReference => "ESRB_TOBACCO_REFERENCE",
            Category::EsrbUseOfAlcohol => "ESRB_USE_OF_ALCOHOL",
            Category::EsrbUseOfDrugs => "ESRB_USE_OF_DRUGS",
            Category::EsrbUseOfTobacco => "ESRB_USE_OF_TOBACCO",
            Category::EsrbViolence => "ESRB_VIOLENCE",
            Category::EsrbViolentReferences => "ESRB_VIOLENT_REFERENCES",
            Category::EsrbAnimatedViolence => "ESRB_ANIMATED_VIOLENCE",
            Category::EsrbMildLanguage => "ESRB_MILD_LANGUAGE",
            Category::EsrbMildViolence => "ESRB_MILD_VIOLENCE",
            Category::EsrbUseOfDrugsAndAlcohol => "ESRB_USE_OF_DRUGS_AND_ALCOHOL",
            Category::EsrbDrugAndAlcoholReference => "ESRB_DRUG_AND_ALCOHOL_REFERENCE",
            Category::EsrbMildSuggestiveThemes => "ESRB_MILD_SUGGESTIVE_THEMES",
            Category::EsrbMildCartoonViolence => "ESRB_MILD_CARTOON_VIOLENCE",
            Category::EsrbMildBlood => "ESRB_MILD_BLOOD",
            Category::EsrbRealisticBloodAndGore => "ESRB_REALISTIC_BLOOD_AND_GORE",
            Category::EsrbRealisticViolence => "ESRB_REALISTIC_VIOLENCE",
            Category::EsrbAlcoholAndTobaccoReference => "ESRB_ALCOHOL_AND_TOBACCO_REFERENCE",
            Category::EsrbMatureSexualThemes => "ESRB_MATURE_SEXUAL_THEMES",
            Category::EsrbMildAnimatedViolence => "ESRB_MILD_ANIMATED_VIOLENCE",
            Category::EsrbMildSexualThemes => "ESRB_MILD_SEXUAL_THEMES",
            Category::EsrbUseOfAlcoholAndTobacco => "ESRB_USE_OF_ALCOHOL_AND_TOBACCO",
            Category::EsrbAnimatedBloodAndGore => "ESRB_ANIMATED_BLOOD_AND_GORE",
            Category::EsrbMildFantasyViolence => "ESRB_MILD_FANTASY_VIOLENCE",
            Category::EsrbMildLyrics => "ESRB_MILD_LYRICS",
            Category::EsrbRealisticBlood => "ESRB_REALISTIC_BLOOD",
            Category::PegiViolence => "PEGI_VIOLENCE",
            Category::PegiSex => "PEGI_SEX",
            Category::PegiDrugs => "PEGI_DRUGS",
            Category::PegiFear => "PEGI_FEAR",
            Category::PegiDiscrimination => "PEGI_DISCRIMINATION",
            Category::PegiBadLanguage => "PEGI_BAD_LANGUAGE",
            Category::PegiGambling => "PEGI_GAMBLING",
            Category::PegiOnlineGameplay => "PEGI_ONLINE_GAMEPLAY",
            Category::PegiInGamePurchases => "PEGI_IN_GAME_PURCHASES",
            Category::CeroLove => "CERO_LOVE",
            Category::CeroSexualContent => "CERO_SEXUAL_CONTENT",
            Category::CeroViolence => "CERO_VIOLENCE",
            Category::CeroHorror => "CERO_HORROR",
            Category::CeroDrinkingSmoking => "CERO_DRINKING_SMOKING",
            Category::CeroGambling => "CERO_GAMBLING",
            Category::CeroCrime => "CERO_CRIME",
            Category::CeroControlledSubstances => "CERO_CONTROLLED_SUBSTANCES",
            Category::CeroLanguagesAndOthers => "CERO_LANGUAGES_AND_OTHERS",
            Category::GracSexuality => "GRAC_SEXUALITY",
            Category::GracViolence => "GRAC_VIOLENCE",
            Category::GracFearHorrorThreatening => "GRAC_FEAR_HORROR_THREATENING",
            Category::GracLanguage => "GRAC_LANGUAGE",
            Category::GracAlcoholTobaccoDrug => "GRAC_ALCOHOL_TOBACCO_DRUG",
            Category::GracCrimeAntiSocial => "GRAC_CRIME_ANTI_SOCIAL",
            Category::GracGambling => "GRAC_GAMBLING",
            Category::ClassIndViolencia => "CLASS_IND_VIOLENCIA",
            Category::ClassIndViolenciaExtrema => "CLASS_IND_VIOLENCIA_EXTREMA",
            Category::ClassIndConteudoSexual => "CLASS_IND_CONTEUDO_SEXUAL",
            Category::ClassIndNudez => "CLASS_IND_NUDEZ",
            Category::ClassIndSexo => "CLASS_IND_SEXO",
            Category::ClassIndSexoExplicito => "CLASS_IND_SEXO_EXPLICITO",
            Category::ClassIndDrogas => "CLASS_IND_DROGAS",
            Category::ClassIndDrogasLicitas => "CLASS_IND_DROGAS_LICITAS",
            Category::ClassIndDrogasIlicitas => "CLASS_IND_DROGAS_ILICITAS",
            Category::ClassIndLinguagemImpropria => "CLASS_IND_LINGUAGEM_IMPROPRIA",
            Category::ClassIndAtosCriminosos => "CLASS_IND_ATOS_CRIMINOSOS",
        }
    }

    fn as_int(value: Option<i32>) -> Self {
        match value {
            Some(num) => Self::try_from(num).unwrap(),
            None => Category::Null,
        }
    }
}
